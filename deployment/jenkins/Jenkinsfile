// Movex/deployment/jenkins/Jenkinsfile

pipeline {
    agent any

    environment {
        DOCKER_HOST = 'unix:///var/run/docker.sock'
        KUBECONFIG_CONTEXT = 'minikube'
        DOCKER_IMAGE_PREFIX = ''
    }

    stages {
        stage('Build All Microservices') {
            steps {
                script {
                    sh 'mvn clean package -DskipTests'
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                script {
                    def microservices = [
                        'fleet-management-service': '8080',
                        'telemetry-ingestion-service': '8081',
                        'telemetry-processing-alert-service': '8082',
                        'route-optimization-service': '8083',
                        'notification-service': '8084'
                    ]

                    microservices.each { serviceName, servicePort ->
                        dir("microservices/${serviceName}") {
                            sh "docker build -t ${env.DOCKER_IMAGE_PREFIX}${serviceName}:latest -f Dockerfile ."
                        }
                    }
                }
            }
        }

        stage('Deploy to Minikube') {
            steps {
                script {
                    sh 'kubectl config use-context minikube'

                    def microservices = [
                        'fleet-management-service',
                        'telemetry-ingestion-service',
                        'telemetry-processing-alert-service',
                        'route-optimization-service',
                        'notification-service'
                    ]

                    microservices.each { serviceName ->
                        dir("microservices/${serviceName}/k8s") {
                            sh "kubectl apply -f ."
                        }
                    }
                    sh 'kubectl get pods'
                    sh 'kubectl get svc'
                }
            }
        }

        stage('Verify Deployment (Optional)') {
            steps {
                script {
                    echo "Validações pós-deploy seriam inclusas aqui."
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline finished.'
        }
        failure {
            echo 'Pipeline failed! Check the console output for errors.'
        }
        success {
            echo 'Pipeline succeeded!'
        }
    }
}